<?phpclass Ftp{	public function __construct($server, $port = 21, $timeOut = 90){		$this->_ftp = ftp_connect($server, $port, $timeOut) or die(Error::brut('Fail to connect at '.$server.'!'));		$this->_port = $port;		$this->_server = $server;		$_SESSION['port'] = $port;		$_SESSION['server'] = $server;	}	public function login($pseudo, $mdp){		$this->_pseudo = $pseudo;		$this->_mdp = $mdp;		/*/echo 'host: '.$this->_server.' pseudo: '.$this->_pseudo.' mdp: '.$this->_mdp.' port: '.$this->_port;die;/**/		if(!ftp_login($this->_ftp, $this->_pseudo, $this->_mdp))			return false;		$_SESSION['pseudo'] = $pseudo;		$_SESSION['mdp'] = $mdp;		return true;	}	public function logout(){		ftp_close($this->_ftp);		unset($_SESSION['server']);		unset($_SESSION['pseudo']);		unset($_SESSION['mdp']);		unset($_SESSION['port']);	}	public function listDir($cible = '.'){		$files = ftp_nlist($this->_ftp, $cible);		array_shift($files);		array_shift($files);		return $files;	}	public function ls($cible = '.'){		$files = ftp_rawlist($this->_ftp, $cible);		if(empty($files))			return false;		array_shift($files);		array_shift($files);		foreach($files AS $i => $desc){			$desc = str_replace(array('     ', '    ', '   ','  '), ' ', $desc);			$extract = explode(' ' , $desc);			$files[$i] = array();			$files[$i]['type'] = 0;			if('d' == substr($extract[0], 0, 1))				$files[$i]['type'] = 1;			$files[$i]['access'] = $extract[0];			$files[$i]['proprio'] = $extract[1];			$files[$i]['groupe'] = $extract[2];			$files[$i]['date'] = $extract[3];			$files[$i]['pid'] = $extract[4];			$files[$i]['date'] = $extract[5].' '.$extract[6].' '.$extract[7];			$files[$i]['name'] = $extract[8];		}		$diretory = $file = array();		foreach($files AS $i => $fichier){			if($fichier['type'] == 1)				$diretory[] = $fichier;			else				$file[] = $fichier;		}		return array_merge($diretory, $file);	}	public function fileOnly($cible){		$all = $this->ls($cible);		$files = array();		if(empty($all))			return $files;		foreach($all as $child){			if($child['type'] != 1)				$files[] = $child;		}		return $files;	}	public function mvc($src){		$chemins = array(			'ctr' => $src.'/controleur',			'mod' => $src.'/model',			'vue' => $src.'/vue'		);		$architectMVC = array();		foreach($chemins as $name => $chemin){			$newList = $this->fileOnly($chemin);			if(empty($newList))				continue;			foreach($newList as $file){				$architectMVC[substr($file['name'], 4, -4)][] = $name;			}		}		return $architectMVC;	}	public function passif(){		return ftp_pasv($this->_ftp, true);	}	public function passifOff(){		return ftp_pasv($this->_ftp, false);	}	private function formatFtp($distant){		if(empty($distant))			return $this->_pathServer;		return $distant;	}	private function formatLocal($local){		if(empty($local))			return getcwd().'\\.'.str_replace('/', '\\', $this->_pathServer);		return $local;	}	public function dll($cible, $local = false, $distant = false){		$local = $this->formatLocal($local).$cible;		$distant = $this->formatFtp($distant).$cible;		ftp_get($this->_ftp, $local, $distant, FTP_BINARY);	}	public function push($cible, $local = false, $distant = false){		$local = $this->formatLocal($local).$cible;		$distant = $this->formatFtp($distant).$cible;		ftp_put($this->_ftp, $distant, $local, FTP_BINARY);	}	public function rm($cible, $distant = false){		$distant = $this->formatFtp($distant).$cible;		return ftp_delete($this->_ftp, $distant);	}	public function newDir($cible, $distant = false){		$distant = $this->formatFtp($distant).$cible;		return ftp_mkdir($this->_ftp, $distant);	}	public function rmDir($cible, $distant = false){		$distant = $this->formatFtp($distant).$cible;		return ftp_rmdir($this->_ftp, $distant);	}	public function cd($cible){		if(empty($cible))			$cible = '/';		$this->_pathServer = $cible;		return ftp_chdir($this->_ftp, $cible);	}	public function pwd(){		return ftp_pwd($this->_ftp);	}	public function exec($cmd){		return ftp_exec($this->_ftp, $cmd);	}	public function chmod($cible){		$distant = $this->formatFtp($distant).$cible;		return ftp_chmod($this->_ftp, 0775, $distant);	}	public static function favor(){		return ScanDossier::fileOnly('fragments/ftp');	}}?>